# R script for solitaire rating
# Given a player's solitaire history (a sequence of losses and wins)
# we assign a rating

# Let X_i be the ith game, X_i=1 for win and X_i=0 for loss
# Let f(X_i,...,X_j) be a scoring function
# Then we define the player rating as
# the max of f(X_i,...,X_j) over all (i,j) pairs with 1<=i<=j<=n

# We consider three different scoring functions
# streak score: f(X_i,...,X_j) = (X_i * ... * X_j) * (j-i+1)
# weighted average: f(X_i,...,X_j) = (X_i+...+X_j)/(j-i+1+K), where K is a constant
# [weighted average with] length bonus:   (X_i+...+X_j)/(j-i+1+K) + L * log(log(j-i+3)), L is a constant

# We simulate players with fixed win probabilities
# Can the ratings correctly rank the players by win probability?

n.reps <- 1000 # simulation parameter

rating <- function(x,score_f) {
  n <- length(x)
  current <- -Inf
  for (i in 1:n) {
    for (k in 0:(n-i)) {
	  temp <- score_f(x[i:(i+k)])
	  if (current < temp) {current <- temp}
	}
  }
  current
}

seq2streak <- function(x) {
  if (x[length(x)]==1) {x <- c(x,0)}
  inds <- which(x==0)
  inds-c(0,inds[-length(inds)])-1
}

streak2seq <- function(ss) {
  inds <- cumsum(ss+1)
  x <- numeric(sum(ss+1))+1
  x[inds] <- 0
  if (ss[length(ss)] > 0) {x <- x[-length(x)]}
  x
}


# parameters for weighted average and length bonus
# unless K is much larger than the longest streak, weighted average will be equivalent to max streak
K <- 20
L <- 1

s_streak <- function(x) {
  prod(x) * length(x)
}

s_weighted <- function(x) {
  sum(x)/(length(x)+K)
}

s_bonus <- function(x) {
  sum(x)/(length(x)+K) + L * log(log(length(x)+2))
}


# special algorithms for computing ratings when n is large

max_window_counts <- function(x, grid=1:length(x), cx=cumsum(c(0,x))) {
  n<- length(x)
  ans <- grid
  for (i in 1:length(grid)) {
    k <- grid[i]
    ans[i] <- max(cx[(1+k):(n+1)]-cx[1:(n-k+1)])
  }
  ans
}

r_streak <- function(x) {
  ss <- seq2streak(x)
  max(ss)
}

# iterative search for best score
r_weighted <- function(x,log.bonus=F) {
  lf <- 0
  if (log.bonus) {lf <- L}
  n <- length(x)
  subd <- floor(sqrt(n))
  grid <- unique(floor(exp(seq(0,log(n),log(n)/100))))
  cx <- cumsum(c(0,x))
  mwc <- max_window_counts(x,grid,cx)
  flag <- T
  current <- -Inf
  while (flag) {
    grid.l <- c(1,grid[-length(grid)]+1)
    ub <- mwc/(grid.l+K) + lf*log(log(grid+2)) # upper bound on score for length from grid.l to grid
    lb <- mwc/(grid+K) + lf*log(log(grid+2))
    res <- cbind(grid,grid.l,mwc,ub,lb)
	inds <- which(max(lb) < ub)
	if (sum(ub > max(lb))==0) {flag <- F;current <- max(lb)}
	if (flag) {
	  grid2 <- floor((grid[inds]+grid.l[inds])/2)
	  grid2 <- setdiff(grid2,grid)
	  mwc2 <- max_window_counts(x,grid2,cx)
	  mwc <- c(mwc,mwc2)
	  grid <- c(grid,grid2)
	  mwc <- mwc[order(grid)]
	  grid <- grid[order(grid)]
	}
  }
  current
}

# test the special algorithms
print("code test")
x <- rbinom(100,1,0.5)
print(c(rating(x, s_streak), r_streak(x)))
print(c(rating(x, s_weighted), r_weighted(x)))
print(c(rating(x, s_bonus), r_weighted(x,T)))

ns <- floor(10^seq(2,5,0.2))
ps <- c(0.4,0.39,0.35,.30,.10)

means <- array(0,c(length(ps),length(ns),3))
vars <- means

print("Computing...")
for (i in 1:length(ns)) {
  for (j in 1:length(ps)) {
    temp <- matrix(0,3,n.reps)
    for (ii in 1:n.reps) {
	  x <- rbinom(ns[i],1,ps[j])
	  temp[1,ii] <- r_streak(x)
	  temp[2,ii] <- r_weighted(x)
	  temp[3,ii] <- r_weighted(x,T)
	}
    means[j,i,] <- apply(temp,1,mean)
	vars[j,i,] <- apply(temp,1,var)
  }
  print(paste(i,"/",length(ns)))
}

stdevs <- 3*sqrt(vars)
lmeans <- means-stdevs
umeans <- means+stdevs

bcols <- hsv(1:length(ps)/length(ps), .9,.4,.5)
lcols <- hsv(1:length(ps)/length(ps), 1,.2)

nms <- c("max streak", "weighted avg", "w. avg + len. bonus")

for (tt in 1:3) {
  pdf(paste("ratingplot1_",tt,".pdf",sep=""))
  yl <- c(min(lmeans[,,tt]),max(umeans[,,tt]))
  plot(xy.coords(ns,means[2,,tt],log="x"),log="x",xlab="n",ylab="rating",ylim=yl,pch=".")
  title(nms[tt],sub="error bars are 3 * st. dev")
  for (i in 1:length(ps)) {
    polygon(xy.coords(c(ns,rev(ns)),c(umeans[i,,tt],rev(lmeans[i,,tt])),log="x"),col=bcols[i],border=NA)  
  }
  for (i in 1:length(ps)) {
    lines(xy.coords(ns,means[i,,tt],log="x"),col=lcols[i])
  }
  legend(ns[floor(length(ns)*.8)],yl[1]+.2*(yl[2]-yl[1]),lty=rep(1,length(ps)),legend=paste("p=",ps,sep=""),col=lcols,cex=.7)
  dev.off()
}
