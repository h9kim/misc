pnorm(-4.11)
grid
res = 10
sz = 10
temp = -res:res
temp = -(res*sz):(res*sz)/res
res2 = 2*res+1
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
n = res2^2
rad = .5
res = 10
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
res = 100
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
sig = sum(abs(ggrid),1)
pospart = function(v) {
v[v < 0] = 0
return(v)
}
sig = pospart(rad-sum(abs(ggrid),1))
image(matrix(sig,res2,res2))
sum(abs(ggrid),1)
sig = pospart(rad-apply(abs(ggrid),1,sum))
image(matrix(sig,res2,res2))
rad = 1
sig = pospart(rad-apply(abs(ggrid),1,sum))
image(matrix(sig,res2,res2))
exp(1+1i)
ftsig = function(lambda) {
expi = exp(i*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
lambdas0 = 0:10
length(lambdas0)
selffact = function(v) {
return(cbind(rep(v,each=length(v)),rep(v,length(v))))
}
lambdas = selffact(0:10)
sqshape = function(v) {
matrix(v,sqrt(length(v)),sqrt(length(v)))
}
fts = apply(lambdas,1,ftsig)
ftsig = function(lambda) {
expi = exp((0+1i)*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
lambdas = selffact(0:10)
fts = apply(lambdas,1,ftsig)
image(sqshape(Re(fts)))
image(sqshape(Im(fts)))
pospart = function(v) {
v[v < 0] = 0
return(v)
}
ftsig = function(lambda) {
expi = exp((0+1i)*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
selffact = function(v) {
return(cbind(rep(v,each=length(v)),rep(v,length(v))))
}
sqshape = function(v) {
matrix(v,sqrt(length(v)),sqrt(length(v)))
}
res = 100
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
xyg = selffact((0:res)/res)
mask = (xyg[,2] < (1-xyg[,1]))+0
image(mask)
image(sqshape(mask))
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
image(sqshape(mask))
expi = exp((0+1i)*(xyg %*% lambda))
lambda = c(1,1)
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
expi = exp((0+1i)*(xyg %*% lambda))
sigi = 1-apply(xyg,1,sum)
gxy = function(lambda) {
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
expi = exp((0+1i)*(xyg %*% lambda))
sigi = 1-apply(xyg,1,sum)
return(sum(mask*expi*sigi)/(res^2))
}
lambda = c(1,1)
gxy(lambda)
gy = function(x,lambda2) {
ygd = (0:floor(res*(1-x)))/res
expi = exp((0+1i)*lambda2*ygd)
return(sum(ygd*expi)/res)
}
gy(.5,lambda[2])
xgd = (0:res)/res
t(xgd)
temp = apply(t(xgd),2,function(x) { gy(x,lambda[2])})
temp
gx = function(lambda) {
xgd = (0:res)/res
temp = apply(t(xgd),2,function(x) { gy(x,lambda[2])})
expi = exp((0+1i)*(lambda[1]*xgd))
return(sum(temp*expi)/res)
}
lambda = c(1,1)
gxy(lambda)
gx(lambda)
res = 100
lambda = c(1,1)
gxy(lambda)
gx(lambda)
res = 1000
lambda = c(1,1)
gxy(lambda)
gx(lambda)
gy = function(x,lambda2) {
ygd = (0:floor(res*(1-x)))/res
expi = exp((0+1i)*lambda2*ygd)
return(sum((1-x-ygd)*expi)/res)
}
res = 10
lambda = c(1,1)
gxy(lambda)
gx(lambda)
gy1 = function(x,lambda2) {
-(1-x)/lambda2 + exp((0+1i)*lambda2*(1-x)) - 1
}
x = .5
gy(x,lambda[2])
gy1(x,lambda[2])
a <- matrix(rnorm(1000),10,100)
a <- matrix(rnorm(100000),100,1000)
a <- rnorm(100000)
system.time(b <- matrix(a, 100, 1000))
system.time(for (ii in 1:1000) b <- matrix(a, 100, 1000))
system.time(for (ii in 1:1000) b <- t(b))
system.time(for (ii in 1:1000) a <- matrix(a, 100, 1000))
a <- rnorm(200000)
system.time(for (ii in 1:1000) a <- matrix(a, 200, 1000))
system.time(for (ii in 1:1000) a <- matrix(a, 400, 500))
system.time(for (ii in 1:1000) a <- matrix(a, 500, 400))
system.time(for (ii in 1:1000) a <- matrix(a, 1000, 200))
system.time(for (ii in 1:1000) a <- matrix(a, 2, 50000))
a <- rnorm(10000)
system.time(for (ii in 1:10000) a <- matrix(a, 100, 100))
a <- rnorm(1e8)
system.time(a <- matrix(a, 1e4, 1e4))
system.time(t(matrix(a, 1e4, 1e4)))
a <- rnorm(1e4)
a <- rnorm(1e8)
system.time(a <- matrix(a, 1, 1e8))
system.time(a <- t(a))
system.time(a <- t(a))
a <- rnorm(2 *1e8)
a <- matrix(a,1e8,2)
system.time(b <- a[,1])
system.time(b <- a[,1]; b <- t(t(b)))
system.time(b <- t(t(b)))
system.time(b <- a[, 1, drop=F])
setwd("~/misc/stat312/project2")
library(Rcpp)
sourceCpp('pdist.cpp') # code from http://blog.felixriedel.com/2013/05/pairwise-distances-in-r/
ddir <- "/home/snarles/stat312data"
list.files(ddir)
load(paste0(ddir, "/all_voxel_locations.RData"))
dim(voxel.loc) # 25915 3
load(paste0(ddir, "/v1_locations.RData"))
dim(v1_locations) # 1331 3
library(prodlim)
v1_inds <- row.match(data.frame(v1_locations), data.frame(voxel.loc))
load(paste0(ddir, "/train_v1.RData"))
load(paste0(ddir, "/valid_index.RData"))
train_index <- read.csv(paste0(ddir, "/indexTrain.csv"), header = FALSE)
train_index <- as.vector(train_index)
load(paste0(ddir, "/feature_valid.RData"))
load(paste0(ddir, "/feature_train.RData"))
dim(feature_train) # 1750 10921
dim(feature_valid) # 120 10921
load(paste0(ddir, "/valid_v1.RData"))
dim(valid_v1) # 1331 1560
dim(train_v1) # 1331 3500
ntime <- 1560
nvalid <- 120
ntrain <- 1750
v1_filt1 <- (apply(valid_v1, 1, function(x) {sum(is.na(x))}) == 0)
v1_filt2 <- (apply(train_v1, 1, function(x) {sum(is.na(x))}) == 0)
v1_filt <- v1_filt1 & v1_filt2
v1_locations <- v1_locations[v1_filt, ]
valid_v1 <- valid_v1[v1_filt, ]
train_v1 <- train_v1[v1_filt, ]
(nvox <- sum(v1_filt)) #1294
load(paste0(ddir, '/data_feature_filt.RData'))
dim(wav.pyr_filt)
dim(feature_train_filt)
dim(feature_valid_filt)
savelist <- c()
savelist <- c(savelist, "voxel.loc")
savelist <- c(savelist, "train_index")
savelist <- c(savelist, "valid_index")
savelist <- c(savelist, "valid_v1")
savelist <- c(savelist, "train_v1")
savelist <- c(savelist, "v1_locations")
savelist <- c(savelist, "wav.pyr_filt")
savelist <- c(savelist, "feature_train_filt")
savelist <- c(savelist, "feature_valid_filt")
savelist
savelist[1:6]
savelist <- savelist[1:6]
apply(feature_valid_filt, 2, mean)
mus <- apply(feature_valid_filt, 2, mean)
nfeatures <- dim(feature_valid_filt)[2]
(nfeatures <- dim(feature_valid_filt)[2])
savelist <- c(savelist, "nfeatures")
savelist <- c(savelist, "ntime", "nvalid", "ntrain")
savelist <- c(savelist, "nvox")
sds <- apply(feature_valid_filt, 2, sd)
plot(mus, sds)
dim(feature_train_filt)
dim(feature_valid_filt) # 1750 2248
feature_train_sdd <- t((t(feature_train_filt) - mus)/sds)
dim(feature_train_sdd)
feature_valid_sdd <- t((t(feature_valid_filt) - mus)/sds)
dim(feature_valid_sdd)
savelist <- c(savelist, "wav.pyr_filt")
savelist <- c(savelist, "feature_train_sdd")
savelist <- c(savelist, "feature_valid_sdd")
savelist
valid_index
save(list = savelist, file = paste0(ddir, "/preproc_version1.RData"))
